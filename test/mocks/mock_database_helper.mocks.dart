// Mocks generated by Mockito 5.4.6 from annotations
// in study/test/mocks/mock_database_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:study/src/models/project_model.dart' as _i5;
import 'package:study/src/models/session_model.dart' as _i7;
import 'package:study/src/models/task_model.dart' as _i6;
import 'package:study/src/services/database_helper.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> insertProject(_i5.Project? project) =>
      (super.noSuchMethod(
            Invocation.method(#insertProject, [project]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Project>> getAllProjects() =>
      (super.noSuchMethod(
            Invocation.method(#getAllProjects, []),
            returnValue: _i4.Future<List<_i5.Project>>.value(<_i5.Project>[]),
          )
          as _i4.Future<List<_i5.Project>>);

  @override
  _i4.Future<void> updateProject(_i5.Project? project) =>
      (super.noSuchMethod(
            Invocation.method(#updateProject, [project]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> insertTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#insertTask, [task]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.Task>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue: _i4.Future<List<_i6.Task>>.value(<_i6.Task>[]),
          )
          as _i4.Future<List<_i6.Task>>);

  @override
  _i4.Future<void> insertSession(_i7.Session? session) =>
      (super.noSuchMethod(
            Invocation.method(#insertSession, [session]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i7.Session>> getAllSessions() =>
      (super.noSuchMethod(
            Invocation.method(#getAllSessions, []),
            returnValue: _i4.Future<List<_i7.Session>>.value(<_i7.Session>[]),
          )
          as _i4.Future<List<_i7.Session>>);

  @override
  _i4.Future<List<_i7.Session>> getSessionsForDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getSessionsForDate, [date]),
            returnValue: _i4.Future<List<_i7.Session>>.value(<_i7.Session>[]),
          )
          as _i4.Future<List<_i7.Session>>);
}
